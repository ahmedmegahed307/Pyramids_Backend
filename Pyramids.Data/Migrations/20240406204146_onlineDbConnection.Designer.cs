// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pyramids.Data;

#nullable disable

namespace Pyramids.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240406204146_onlineDbConnection")]
    partial class onlineDbConnection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Pyramids.Core.Models.AIUserInputAccuracyTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Accuracy")
                        .HasColumnType("bit");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserInput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserInputIntent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserInputIntentConfidenceScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AIUserInputAccuracyTrackings");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Pyramids.Core.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetManufacturerId")
                        .HasColumnType("int");

                    b.Property<int>("AssetModelId")
                        .HasColumnType("int");

                    b.Property<int>("AssetTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("TagNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssetManufacturerId");

                    b.HasIndex("AssetModelId");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("ClientId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Pyramids.Core.Models.AssetManufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssetManufacturers");
                });

            modelBuilder.Entity("Pyramids.Core.Models.AssetModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssetModels");
                });

            modelBuilder.Entity("Pyramids.Core.Models.AssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AssetTypes");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryFinancialEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryFinancialName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VatRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VatValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("ClientPortalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsResolutionRequired")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSendPostWorkSurvey")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSignatureRequired")
                        .HasColumnType("bit");

                    b.Property<string>("LogoFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NormalHourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NormalWorkingHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverTimeWorkingHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OvertimeHourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentTerm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryIndustry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Taxable")
                        .HasColumnType("bit");

                    b.Property<string>("TermsAndConditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VatNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6016), new TimeSpan(0, 3, 0, 0, 0)),
                            Email = "support@pyramids.com",
                            IsActive = true,
                            IsDeleted = false,
                            IsResolutionRequired = false,
                            IsSendPostWorkSurvey = false,
                            IsSignatureRequired = false,
                            Name = "Pyramids",
                            Taxable = false
                        });
                });

            modelBuilder.Entity("Pyramids.Core.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ContactType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SiteId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<double?>("ContractCharge")
                        .HasColumnType("float");

                    b.Property<string>("ContractRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultEngineerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EstimatedDurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FrequencyCount")
                        .HasColumnType("int");

                    b.Property<int?>("FrequencyType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JobSubTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DefaultEngineerId");

                    b.HasIndex("JobSubTypeId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CashOnDelivery")
                        .HasColumnType("bit");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EngineerId")
                        .HasColumnType("int");

                    b.Property<int?>("EstimatedDuration")
                        .HasColumnType("int");

                    b.Property<bool?>("GetSurveySignature")
                        .HasColumnType("bit");

                    b.Property<string>("Instruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("JobAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobContact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JobDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("JobStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("JobSubTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("NotifyClient")
                        .HasColumnType("bit");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduleDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("TechComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UniqueCode")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EngineerId");

                    b.HasIndex("JobStatusId");

                    b.HasIndex("JobSubTypeId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("SiteId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JobActionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("JobSessionId")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("JobActionTypeId");

                    b.HasIndex("JobId");

                    b.HasIndex("JobSessionId");

                    b.ToTable("JobActions");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobActionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobActionStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6678), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Created via admin",
                            StatusCode = "CREATED"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6688), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Cancelled",
                            StatusCode = "CANCELLED"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6690), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Assigned",
                            StatusCode = "ASSIGNED"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6692), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Closed via admin",
                            StatusCode = "CLOSED_ADMIN"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6693), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Resolved via mobile",
                            StatusCode = "RESOLVED_MOBILE"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6695), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Travel started on mobile",
                            StatusCode = "TRAVEL_STARTED"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6697), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Travel cancelled on mobile",
                            StatusCode = "TRAVEL_CANCELLED"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6698), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Travel finished on mobile",
                            StatusCode = "TRAVEL_FINISHED"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6700), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Work started on mobile",
                            StatusCode = "WORK_STARTED"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6710), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Work stopped on mobile",
                            StatusCode = "WORK_STOPPED"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6712), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Travel started on mobile",
                            StatusCode = "TRAVELBACK_STARTED"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6713), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Travel cancelled on mobile",
                            StatusCode = "TRAVELBACK_CANCELLED"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6715), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Travel finished on mobile",
                            StatusCode = "TRAVELBACK_FINISHED"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6716), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Photo deleted",
                            StatusCode = "PHOTO_DELETED"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6718), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Client signature added",
                            StatusCode = "SIGN_CLIENT_ADDED"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6719), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Engineer signature added",
                            StatusCode = "SIGN_ENG_ADDED"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6721), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Client signature deleted",
                            StatusCode = "SIGN_CLIENT_DELETED"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6723), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Engineer signature deleted",
                            StatusCode = "SIGN_ENG_DELETED"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6724), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Part added",
                            StatusCode = "PART_ADDED"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6726), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Part deleted",
                            StatusCode = "PART_DELETED"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6727), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Edited and saved",
                            StatusCode = "SAVED"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6729), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Send Back To Assigned",
                            StatusCode = "SEND_BACK_TO_ASSIGN"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6730), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Send Back To Open",
                            StatusCode = "SEND_BACK_TO_OPEN"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6732), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Resolved via admin",
                            StatusCode = "RESOLVED_ADMIN"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6734), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Job edited",
                            StatusCode = "EDIT_JOB"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6735), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Attachment added",
                            StatusCode = "ATTACHMENT_ADDED"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6737), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Attachment deleted",
                            StatusCode = "ATTACHMENT_DELETED"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6738), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Job saved on mobile",
                            StatusCode = "SAVED_ON_MOBILE"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6752), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Created via mobile",
                            StatusCode = "CREATED_MOBILE"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6798), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Assigned via mobile",
                            StatusCode = "ASSIGNED_MOBILE"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6800), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Added Payment",
                            StatusCode = "ADD_PAYMENT"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6802), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Updated Payment",
                            StatusCode = "UPDATE_PAYMENT"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6804), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Pending Requested by Client",
                            StatusCode = "PENDING_REQUEST"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6805), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Work remote started",
                            StatusCode = "WORK_REMOTE"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6807), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Stop remote work",
                            StatusCode = "STOP_REMOTE"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(6808), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Status = "Close remote work",
                            StatusCode = "CLOSE_REMOTE"
                        });
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobActionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobActionTypes");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobAttachments");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("JobSessionId")
                        .HasColumnType("int");

                    b.Property<int?>("LocalId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOnDisk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SizeInBytes")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("JobFiles");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("JobIssuePriority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JobSessionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Resolved")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("JobId");

                    b.ToTable("JobIssues");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("ProductId");

                    b.ToTable("JobParts");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("EngineerAssignedId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTraveling")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsWorking")
                        .HasColumnType("bit");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<Guid?>("LocalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduleDateOrigin")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SessionStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TravelBackEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TravelBackStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TravelEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TravelEndOrigin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TravelStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TravelStartOrigin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkEndOrigin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("WorkStartOrigin")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("EngineerAssignedId");

                    b.HasIndex("JobId");

                    b.ToTable("JobSessions");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobSessionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.ToTable("JobSessionStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "NotStarted",
                            StatusCode = "N"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Traveling",
                            StatusCode = "T"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Working",
                            StatusCode = "W"
                        },
                        new
                        {
                            Id = 4,
                            Status = "StopWorking",
                            StatusCode = "S"
                        },
                        new
                        {
                            Id = 5,
                            Status = "Closed",
                            StatusCode = "C"
                        });
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "A",
                            Name = "Assigned"
                        },
                        new
                        {
                            Id = 2,
                            Code = "F",
                            Name = "Closed"
                        },
                        new
                        {
                            Id = 3,
                            Code = "O",
                            Name = "Open"
                        },
                        new
                        {
                            Id = 4,
                            Code = "P",
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 5,
                            Code = "R",
                            Name = "Resolved"
                        },
                        new
                        {
                            Id = 6,
                            Code = "X",
                            Name = "Cancelled"
                        });
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobSubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobTypeId");

                    b.ToTable("JobSubTypes");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobSurvey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Courtesy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Overall")
                        .HasColumnType("int");

                    b.Property<int?>("Punctuality")
                        .HasColumnType("int");

                    b.Property<int?>("Quality")
                        .HasColumnType("int");

                    b.Property<int?>("ResponseTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("JobSurveys");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(8174), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Commissioning"
                        });
                });

            modelBuilder.Entity("Pyramids.Core.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Priorities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "h",
                            Name = "high"
                        },
                        new
                        {
                            Id = 2,
                            Code = "m",
                            Name = "medium"
                        },
                        new
                        {
                            Id = 3,
                            Code = "l",
                            Name = "low"
                        });
                });

            modelBuilder.Entity("Pyramids.Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("JobPrice")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SerialControlled")
                        .HasColumnType("bit");

                    b.Property<double>("StandardPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("EngineerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReminderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReminderDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReminderType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("JobId");

                    b.HasIndex("VisitId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("Pyramids.Core.Models.ReminderSeen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ReminderId")
                        .HasColumnType("int");

                    b.Property<int?>("SeenByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReminderId");

                    b.HasIndex("SeenByUserId");

                    b.ToTable("ReminderSeens");
                });

            modelBuilder.Entity("Pyramids.Core.Models.SchedulerEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ModifiedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("SchedulerEvents");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Pyramids.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ConfirmationKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("CultureInfoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneratedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Initials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("bit");

                    b.Property<string>("LastDomainName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PasswordChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileLogoFilename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResetPasswordKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ResetPasswordKeyValidToDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SessionToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SessionTokenDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Pyramids.Core.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(8524), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(8531), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Role = "Engineer"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 4, 6, 23, 41, 46, 668, DateTimeKind.Unspecified).AddTicks(8532), new TimeSpan(0, 3, 0, 0, 0)),
                            IsActive = true,
                            IsDeleted = false,
                            Role = "Client"
                        });
                });

            modelBuilder.Entity("Pyramids.Core.Models.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("GeneratedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("GeneratedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Invoiced")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsGenerated")
                        .HasColumnType("bit");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("GeneratedByUserId");

                    b.HasIndex("JobId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Pyramids.Core.Models.WorkDocket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("WorkdocketCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkDockets");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Address", b =>
                {
                    b.HasOne("Pyramids.Core.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Asset", b =>
                {
                    b.HasOne("Pyramids.Core.Models.AssetManufacturer", "AssetManufacturer")
                        .WithMany()
                        .HasForeignKey("AssetManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pyramids.Core.Models.AssetModel", "AssetModel")
                        .WithMany()
                        .HasForeignKey("AssetModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pyramids.Core.Models.AssetType", "AssetType")
                        .WithMany()
                        .HasForeignKey("AssetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pyramids.Core.Models.Client", "Client")
                        .WithMany("Assets")
                        .HasForeignKey("ClientId");

                    b.Navigation("AssetManufacturer");

                    b.Navigation("AssetModel");

                    b.Navigation("AssetType");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Company", b =>
                {
                    b.HasOne("Pyramids.Core.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Contact", b =>
                {
                    b.HasOne("Pyramids.Core.Models.Client", "Client")
                        .WithMany("Contacts")
                        .HasForeignKey("ClientId");

                    b.HasOne("Pyramids.Core.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId");

                    b.Navigation("Client");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Contract", b =>
                {
                    b.HasOne("Pyramids.Core.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Pyramids.Core.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Pyramids.Core.Models.User", "DefaultEngineer")
                        .WithMany()
                        .HasForeignKey("DefaultEngineerId");

                    b.HasOne("Pyramids.Core.Models.JobSubType", "JobSubType")
                        .WithMany()
                        .HasForeignKey("JobSubTypeId");

                    b.HasOne("Pyramids.Core.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId");

                    b.Navigation("Client");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DefaultEngineer");

                    b.Navigation("JobSubType");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Job", b =>
                {
                    b.HasOne("Pyramids.Core.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Pyramids.Core.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Pyramids.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pyramids.Core.Models.Contact", "Contact")
                        .WithMany("Jobs")
                        .HasForeignKey("ContactId");

                    b.HasOne("Pyramids.Core.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Pyramids.Core.Models.User", "Engineer")
                        .WithMany()
                        .HasForeignKey("EngineerId");

                    b.HasOne("Pyramids.Core.Models.JobStatus", "JobStatus")
                        .WithMany()
                        .HasForeignKey("JobStatusId");

                    b.HasOne("Pyramids.Core.Models.JobSubType", "JobSubType")
                        .WithMany()
                        .HasForeignKey("JobSubTypeId");

                    b.HasOne("Pyramids.Core.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId");

                    b.HasOne("Pyramids.Core.Models.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("Pyramids.Core.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId");

                    b.Navigation("Address");

                    b.Navigation("Client");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Engineer");

                    b.Navigation("JobStatus");

                    b.Navigation("JobSubType");

                    b.Navigation("JobType");

                    b.Navigation("Priority");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobAction", b =>
                {
                    b.HasOne("Pyramids.Core.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("Pyramids.Core.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Pyramids.Core.Models.JobActionType", "JobActionType")
                        .WithMany()
                        .HasForeignKey("JobActionTypeId");

                    b.HasOne("Pyramids.Core.Models.Job", "Job")
                        .WithMany("JobActions")
                        .HasForeignKey("JobId");

                    b.HasOne("Pyramids.Core.Models.JobSession", "JobSession")
                        .WithMany()
                        .HasForeignKey("JobSessionId");

                    b.Navigation("Client");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Job");

                    b.Navigation("JobActionType");

                    b.Navigation("JobSession");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobAttachment", b =>
                {
                    b.HasOne("Pyramids.Core.Models.Job", null)
                        .WithMany("JobAttachments")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobIssue", b =>
                {
                    b.HasOne("Pyramids.Core.Models.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId");

                    b.HasOne("Pyramids.Core.Models.Job", "Job")
                        .WithMany("JobIssues")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobPart", b =>
                {
                    b.HasOne("Pyramids.Core.Models.Job", "Job")
                        .WithMany("JobParts")
                        .HasForeignKey("JobId");

                    b.HasOne("Pyramids.Core.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Job");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobSession", b =>
                {
                    b.HasOne("Pyramids.Core.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("Pyramids.Core.Models.User", "EngineerAssigned")
                        .WithMany()
                        .HasForeignKey("EngineerAssignedId");

                    b.HasOne("Pyramids.Core.Models.Job", "Job")
                        .WithMany("JobSessions")
                        .HasForeignKey("JobId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("EngineerAssigned");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobSubType", b =>
                {
                    b.HasOne("Pyramids.Core.Models.JobType", "JobType")
                        .WithMany("JobSubTypes")
                        .HasForeignKey("JobTypeId");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Notification", b =>
                {
                    b.HasOne("Pyramids.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pyramids.Core.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("Company");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Reminder", b =>
                {
                    b.HasOne("Pyramids.Core.Models.Contract", "Contract")
                        .WithMany("Reminders")
                        .HasForeignKey("ContractId");

                    b.HasOne("Pyramids.Core.Models.Job", "Job")
                        .WithMany("Reminders")
                        .HasForeignKey("JobId");

                    b.HasOne("Pyramids.Core.Models.Visit", "Visit")
                        .WithMany("Reminders")
                        .HasForeignKey("VisitId");

                    b.Navigation("Contract");

                    b.Navigation("Job");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Pyramids.Core.Models.ReminderSeen", b =>
                {
                    b.HasOne("Pyramids.Core.Models.Reminder", "Reminder")
                        .WithMany("ReminderSeens")
                        .HasForeignKey("ReminderId");

                    b.HasOne("Pyramids.Core.Models.User", "SeenByUser")
                        .WithMany()
                        .HasForeignKey("SeenByUserId");

                    b.Navigation("Reminder");

                    b.Navigation("SeenByUser");
                });

            modelBuilder.Entity("Pyramids.Core.Models.SchedulerEvent", b =>
                {
                    b.HasOne("Pyramids.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Site", b =>
                {
                    b.HasOne("Pyramids.Core.Models.Client", "Client")
                        .WithMany("Sites")
                        .HasForeignKey("ClientId");

                    b.HasOne("Pyramids.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Pyramids.Core.Models.User", b =>
                {
                    b.HasOne("Pyramids.Core.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Pyramids.Core.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pyramids.Core.Models.User", null)
                        .WithMany("Users")
                        .HasForeignKey("UserId");

                    b.HasOne("Pyramids.Core.Models.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Visit", b =>
                {
                    b.HasOne("Pyramids.Core.Models.Contract", "Contract")
                        .WithMany("Visits")
                        .HasForeignKey("ContractId");

                    b.HasOne("Pyramids.Core.Models.User", "GeneratedByUser")
                        .WithMany()
                        .HasForeignKey("GeneratedByUserId");

                    b.HasOne("Pyramids.Core.Models.Job", "Job")
                        .WithMany("Visit")
                        .HasForeignKey("JobId");

                    b.Navigation("Contract");

                    b.Navigation("GeneratedByUser");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Client", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Contacts");

                    b.Navigation("Sites");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Contact", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Contract", b =>
                {
                    b.Navigation("Reminders");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Job", b =>
                {
                    b.Navigation("JobActions");

                    b.Navigation("JobAttachments");

                    b.Navigation("JobIssues");

                    b.Navigation("JobParts");

                    b.Navigation("JobSessions");

                    b.Navigation("Reminders");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("Pyramids.Core.Models.JobType", b =>
                {
                    b.Navigation("JobSubTypes");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Reminder", b =>
                {
                    b.Navigation("ReminderSeens");
                });

            modelBuilder.Entity("Pyramids.Core.Models.User", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Pyramids.Core.Models.Visit", b =>
                {
                    b.Navigation("Reminders");
                });
#pragma warning restore 612, 618
        }
    }
}
